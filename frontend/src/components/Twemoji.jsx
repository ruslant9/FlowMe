// frontend/src/components/Twemoji.jsx

import React, { useMemo } from 'react';
import emojiRegex from 'emoji-regex';
import useMediaQuery from '../hooks/useMediaQuery';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ —ç–º–æ–¥–∑–∏ –≤ –µ–≥–æ –∫–æ–¥–æ–≤—É—é —Ç–æ—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'üòÄ' -> '1f600')
const toCodePoint = (char) => {
  return [...char].map(p => p.codePointAt(0).toString(16)).join('-');
};

const Twemoji = ({ text }) => {
    const isMobile = useMediaQuery('(max-width: 768px)');

    const content = useMemo(() => {
        // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ–¥–∑–∏
        if (isMobile) {
            return text;
        }

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—Ä—É–≥–∏–µ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, <mark>)
        const parseChildren = (children) => {
            return React.Children.map(children, child => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã
                if (typeof child === 'string') {
                    const regex = emojiRegex();
                    const parts = child.split(regex);
                    
                    // –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
                    if (parts.length <= 1) {
                        return child;
                    }
                    
                    const matches = child.match(regex);

                    // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å—Ç—Ä–æ–∫—É, –∑–∞–º–µ–Ω—è—è —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –Ω–∞ <img>
                    return parts.reduce((acc, part, index) => {
                         acc.push(part); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
                         if (matches && matches[index]) {
                             const emoji = matches[index];
                             const codePoint = toCodePoint(emoji);
                             // –ò—Å–ø–æ–ª—å–∑—É–µ–º CDN —Å —ç–º–æ–¥–∑–∏ –≤ —Å—Ç–∏–ª–µ Apple (–∏–∑ –Ω–∞–±–æ—Ä–∞ EmojiOne)
                             const url = `https://cdnjs.cloudflare.com/ajax/libs/emojione/2.2.7/assets/png/${codePoint}.png`;
                             acc.push(<img key={`emoji-${index}`} className="emoji" src={url} alt={emoji} />);
                         }
                         return acc;
                    }, []);
                }
                // –ï—Å–ª–∏ –¥–æ—á–µ—Ä–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –¥—Ä—É–≥–∏–º–∏ –¥–æ—á–µ—Ä–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                if (React.isValidElement(child) && child.props.children) {
                    return React.cloneElement(child, {
                        ...child.props,
                        children: parseChildren(child.props.children)
                    });
                }
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –µ—Å—Ç—å
                return child;
            });
        };

        return parseChildren(text);

    }, [text, isMobile]);

    return <>{content}</>;
};

export default Twemoji;